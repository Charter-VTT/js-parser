name: Release

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Bun dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install

      - name: Run Tests
        run: bun test --coverage

  release:
    name: Release Package
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: write           # Publish GitHub releases
      issues: write             # Comment on released issues
      pull-requests: write      # Comment on released pull requests
      packages: write           # Publish packages to GitHub npm registry

    steps:
      - name: Cache Bun dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install

      - name: Build
        run: bun run build

      - name: Release with semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  publish-docs:
    name: Publish API Documentation
    runs-on: ubuntu-latest
    needs: [release]
    if: success()

    steps:
      - name: Wait for approval
        uses: actions/manual-approval@v1

      - name: Restore Bun dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}

      - name: Generate API docs (JSON)
        run: bunx typedoc --json docs/api.json src/parser.ts

      - name: Get repo and version
        id: meta
        run: |
          REPO_NAME=$(echo "${GITHUB_REPOSITORY}" | tr '/' '__')
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Clone docs repo
        run: |
          git clone https://x-access-token:${{ secrets.DOCS_REPO_TOKEN }}@github.com/charter-vtt/docs.git docs-repo

      - name: Copy API docs
        run: |
          mkdir -p docs-repo/api/${{ steps.meta.outputs.repo_name }}/${{ steps.meta.outputs.version }}
          cp docs/api.json docs-repo/api/${{ steps.meta.outputs.repo_name }}/${{ steps.meta.outputs.version }}/

      - name: Commit and push
        run: |
          cd docs-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "docs(${{ steps.meta.outputs.repo_name }}): add API docs for v${{ steps.meta.outputs.version }}"
          git push
